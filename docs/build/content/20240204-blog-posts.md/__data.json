{"type":"data","nodes":[{"type":"data","data":[null],"uses":{}},{"type":"data","data":[{"content":1,"title":2},"\u003Ch2>I built a blog posts feature\u003C/h2>\n\u003Cp>I built the blog feature. After some trouble with async, I eventually got it working the way I wanted. This solution really only works for text, but it basically goes like this:\u003C/p>\n\u003Cul>\n\u003Cli>I open up the source code on my local machine and write some markdown content in \u003Ccode>src/public/content\u003C/code>.\n\u003Cul>\n\u003Cli>\u003Ccode>npm run dev\u003C/code> for a live preview that I can refresh.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>The contents of \u003Ccode>src/public/content\u003C/code> is shown on \u003Ca href=\"\">https://jukebox.rodeo/content\u003C/a> as pretend \u003Ccode>ls -la -t\u003C/code> output.\n\u003Cul>\n\u003Cli>Sorted by date - I need to add some other sorting options and think about what happens for a large volume of posts.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>You click one of those items and you're routed to \u003Ccode>https://jukebox.rodeo/content/[post]\u003C/code>, where \u003Ccode>[post]\u003C/code> is the filename of the post.\n\u003Cul>\n\u003Cli>This is the Svelte implementation of dynamic routing, so I just have a template for what a blog post should look like.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>This isn't the most future-proof solution and it means my Digital Ocean app is getting redeployed every time I make a new post. It does get me off the ground and helped me decide on some more of the style of the site, so I'm still happy I put the effort in.\u003C/p>\n\u003Ch3>#TODO:\u003C/h3>\n\u003Cp>There's still some work that needs doing before I think this is actually functioning enough that I can back off developing the project for a bit:\u003C/p>\n\u003Cul>\n\u003Cli>I need codeblocks that actually look good.\u003C/li>\n\u003Cli>I want to add a previous/next post option. Much like the \u003Ccode>cd ../\u003C/code> for &quot;back&quot; (it just takes you to \u003Ccode>/content\u003C/code>, try it out up top), I want to make it part of the theme...\n\u003Cul>\n\u003Cli>maybe two more \u003Ccode>cd\u003C/code>s in the pretend terminal history to some env vars? \u003Ccode>$NEXT_POST\u003C/code> and \u003Ccode>$PREV_POST\u003C/code>?\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Some metadata about the posts would be good - I can bring in the date/time.\u003C/li>\n\u003C/ul>\n\u003Cp>I think it would be worth writing up how I implemented the site, even though the source is available, in case people run into some of the problems I did along the way. Next post I'll break down the fake \u003Ccode>ls -la\u003C/code> from \u003Ccode>/content\u003C/code> and then I'll feel satisfied I contributed something to the wall of noise.\u003C/p>\n","20240204-blog-posts.md"],"uses":{"params":["post"]}}]}
